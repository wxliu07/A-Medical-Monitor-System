--- D:/anaconda3/face_recognition/my_mothod/main.py
+++ D:/anaconda3/face_recognition/my_mothod/main.py
@@ -5,7 +5,7 @@
 
         # 第一次卷积、池化
         self.conv1 = nn.Sequential(
-            nn.Conv2d(in_channels=1, out_channels=64, kernel_size=(3, 3), stride=(1, 1), padding=1),  # 卷积层
+            nn.Conv2d(in_channels=1, out_channels=64, kernel_size=3, stride=1, padding=1),  # 卷积层
             nn.BatchNorm2d(num_features=64),  # 归一化
             nn.RReLU(inplace=True),  # 激活函数
             nn.MaxPool2d(kernel_size=2, stride=2),  # 最大值池化
@@ -13,7 +13,7 @@
 
         # 第二次卷积、池化
         self.conv2 = nn.Sequential(
-            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), stride=(1, 1), padding=1),
+            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1),
             nn.BatchNorm2d(num_features=128),
             nn.RReLU(inplace=True),
             nn.MaxPool2d(kernel_size=2, stride=2),
@@ -21,7 +21,7 @@
 
         # 第三次卷积、池化
         self.conv3 = nn.Sequential(
-            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(3, 3), stride=(1, 1), padding=1),
+            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1),
             nn.BatchNorm2d(num_features=256),
             nn.RReLU(inplace=True),
             nn.MaxPool2d(kernel_size=2, stride=2),
@@ -46,12 +46,12 @@
         )
 
     # 前向传播
-    def forward(self, input_x):
-        feature = self.conv1(input_x)
-        feature = self.conv2(feature)
-        feature = self.conv3(feature)
+    def forward(self, x):
+        x = self.conv1(x)
+        x = self.conv2(x)
+        x = self.conv3(x)
         # 数据扁平化
-        feature = feature.view(feature.shape[0], -1)
-        output = self.fc(feature)
-        return output
+        x = x.view(x.shape[0], -1)
+        y = self.fc(x)
+        return y
 